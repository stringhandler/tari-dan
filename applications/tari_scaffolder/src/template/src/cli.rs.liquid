use clap::Parser;
use clap::Subcommand;
use multiaddr::Multiaddr;
use crate::daemon_client::DaemonClient;
use tari_engine_types::parse_arg;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
#[clap(propagate_version = true)]
pub(crate) struct Cli {
    #[clap(long, short = 'e', alias = "endpoint", env = "JRPC_ENDPOINT")]
    pub daemon_jrpc_endpoint: Option<String>,
    #[clap(long, short='t', alias= "token")]
    pub auth_token: String,
    #[clap(long, alias="template_address", default_value ="5d824fb9902af3afa3eefe6b15764ebf336c6b1c6d8438e6efd478b4639d1e36")]
    pub template: String,
    #[clap(long, short='d')]
    pub dump_buckets: bool,
    #[clap(subcommand)]
    pub command: Command,
}

impl Cli {
    pub fn init() -> Self {
        Self::parse()
    }
}

#[derive(Debug, Subcommand, Clone)]
pub(crate) enum Command {
    {% for c in  commands %}
    {{ c.title }}({{ c.name }}::Command),
    {% endfor %}
}

{% for c in  commands %}
pub(crate) mod {{ c.name }} {
   use clap::Args;
   use crate::daemon_client::DaemonClient;
   use serde_json::json;
    use tari_engine_types::parse_arg;
    use tari_engine_types::instruction::Instruction;
    use tari_utilities::hex::Hex;
     use tari_utilities::hex::from_hex;
use tari_engine_types::TemplateAddress;
use tari_template_lib::prelude::ComponentAddress;

   #[derive(Debug, Args, Clone)]
   pub struct Command {
      {%  for  arg in c.args %}
      {% if arg.name != "self" %}
       pub {{ arg.name}} : String,
       {% else %}
       pub component_address: String,
       {% endif %}
      {% endfor %}
   }

   impl Command {

    {% if c.is_method %}

 pub async fn run(self, mut client: DaemonClient, dump_buckets: bool) {

       // let template_address= ;
        let method = "{{c.name}}".to_string();



                client.submit_instruction(Instruction::CallMethod {
                    component_address: ComponentAddress::from_hex(&self.component_address).unwrap(),
                    method,
                    args: vec![
                        {%  for  arg in c.args %}
      {% if arg.name != "self" %}
       parse_arg(&self.{{ arg.name}}).unwrap(),
      {% endif %}
      {% endfor %}
                    ]
               }, dump_buckets

            ).await;
            println!("done");

       }


    {% else %}
       pub async fn run(self, mut client: DaemonClient, template_address: TemplateAddress) {

       // let template_address= ;
        let  function = "{{c.name}}".to_string();



                client.submit_instruction(Instruction::CallFunction {
                    template_address,
                    function,
                    args: vec![
                        {%  for  arg in c.args %}
      {% if arg.name != "self" %}
       parse_arg(&self.{{ arg.name}}).unwrap(),
      {% endif %}
      {% endfor %}
                    ]
               }, false

            ).await;
            println!("done");

       }

       {% endif %}

   }
}
{% endfor %}

